import { app, BrowserWindow, dialog, ipcMain, protocol } from 'electron';
import { appManager } from './electron/AppManager';
import contextMenu from 'electron-context-menu';
import { ProjectOverview } from './electron/ProjectOverview';
import installExtention, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';
import fs from 'fs';
import { SpotifyLoginHandler } from './electron/SpotifyLoginHandler';
import express from "express";
import { Server } from 'socket.io'
import cors from 'cors';
import fetch from 'node-fetch'
import request from "request";
import dotenv from 'dotenv'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  protocol.registerFileProtocol('file', (request, cb) => {
    const url = request.url.replace('file:///', '')
    const decodedUrl = decodeURI(url)
    try {
      return cb(decodedUrl)
    } catch (error) {
      console.error('ERROR: registerLocalResourceProtocol: Could not get file path:', error)
    }
  })

  appManager.setWindow('Projects', new ProjectOverview());

  contextMenu({
    prepend: (defaultActions, parameters, browserWindow) => [
      {
        label: 'Rainbow',
        // Only show it when right-clicking images
        visible: parameters.mediaType === 'image'
      },
    ]
  })

  ipcMain.on('prompt-choose-file', (event) => {
    //NEED TO BE IMPLEMENTED: CHECK WHICH FILES THE AUDIO PLAYER CAN PLAY AND MAKE FILTER APPROPRATELY
    dialog.showOpenDialog(
      {
        title: "Choose File",
        properties: ['openFile'],
        filters: [
          { name: 'Audio', extensions: ['mp3', 'ogg', 'wav'] }
        ]
      }
    )
      .then(res => {
        event.sender.send('file-chosen', res.filePaths);
      });

  });

  ipcMain.on('exportDB', (event, args) => {
    console.log(event, args);

    dialog.showSaveDialog({
      title: "Datenbank exportieren",
      filters: [
        { name: 'Fruchtberk Audio Datenbank', extensions: ['fbadb'] }
      ]
    }).then((res) => {
      fs.writeFile(`${res.filePath}`, args, () => {

      })
    })
  });

  appManager.setWindow('Login', new SpotifyLoginHandler())

  ipcMain.on('SpotifyLoginCompleted', (event, args) => {
    console.log('\n\n\n\nSPOTIFY LOGIN COMPLETED\n---GOT ACCESS TOKEN---\n');

    appManager.getWindow('Login').mainWindow.close();
    appManager.deleteWindow('Login')
  })


  const frontendServer = express();
  const io = new Server(3500, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"],
    }
  });

  frontendServer.use(express.static(`${app.getAppPath()}/src/intermediate-player/`))
  frontendServer.use(cors())

  frontendServer.get('/', (req, res) => {
    console.log(app.getAppPath(), `${app.getAppPath()}/frontend/frontend.html`);

    res.sendFile(`${app.getAppPath()}/src/intermediate-player/index.html`);
  })

  frontendServer.listen(2500, () => {
    console.log('\nIntermediate Player hosted on :2500\n');
    console.log('\nSocket Endpoint hosted on :3500\n');

  })

  io.on('connection', (socket) => {

    fetch('http:localhost:5000/auth/token').then(res => res.json()).then(token => {
      console.log(token);
      socket.emit('initalToken', { token })
    });

    console.log('\n---SOCKET CONNECTED---\n');
  })
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    appManager.setWindow('Projects', new ProjectOverview());
  }
});

app.whenReady().then(() => {
  installExtention(REACT_DEVELOPER_TOOLS)
    .then((name) => console.log(`Added Extension:  ${name}`))
    .catch((err) => console.log('An error occurred: ', err))
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
