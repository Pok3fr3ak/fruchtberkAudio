{"version":3,"sources":["Player.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","props","fade","args","Promise","resolve","reject","interval","val","duration","direction","window","setInterval","a","player","Math","getVolume","min","setVolume","vol","max","setTimeout","clearInterval","useState","undefined","setPlayer","device_id","setDevice_Id","is_paused","setPaused","setActive","name","album","images","url","artists","current_track","setTrack","setDuration","currentTime","setTime","fadeDuration","popupActive","setPopupActive","useEffect","script","document","createElement","src","async","body","appendChild","onSpotifyWebPlaybackSDKReady","Spotify","getOAuthToken","cb","token","volume","addListener","console","log","err","state","floor","position","track_window","paused","getCurrentState","then","connect","socket","on","data","togglePlay","playerInstance","id","spotify_uri","_options","access_token","fetch","method","JSON","stringify","context_uri","headers","offAny","className","onClick","alt","previousTrack","nextTrack","App","io","setToken","emit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.607411ee.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Socket } from 'socket.io-client'\r\nimport { DefaultEventsMap } from 'socket.io/dist/typed-events';\r\n\r\ninterface PlayerToken {\r\n    token: string,\r\n    socket: Socket\r\n    [key: string]: any\r\n}\r\n\r\ninterface PlayOptions {\r\n    spotify_uri: string,\r\n    id: string,\r\n    playerInstance: Spotify.Player\r\n}\r\n\r\ninterface FadeOptions {\r\n    direction: 'in' | 'out',\r\n    player: Spotify.Player,\r\n    duration: number\r\n}\r\n\r\nconst Player = (props: PlayerToken) => {\r\n    const track = {\r\n        name: \"\",\r\n        album: {\r\n            images: [\r\n                { url: \"\" }\r\n            ]\r\n        },\r\n        artists: [\r\n            { name: \"\" }\r\n        ]\r\n    }\r\n\r\n    const play = (args: PlayOptions) => {\r\n        return new Promise<void>((resolve, reject) => {\r\n            args.playerInstance._options.getOAuthToken(access_token => {\r\n                fetch(`https://api.spotify.com/v1/me/player/play?device_id=${args.id}`, {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify({ context_uri: args.spotify_uri }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${access_token}`\r\n                    },\r\n                }).then(() => {\r\n                    resolve();\r\n                })\r\n            });\r\n        })\r\n    };\r\n\r\n    const fade = (args: FadeOptions) => {\r\n        return new Promise<void>((resolve, reject) => {\r\n            let interval: number;\r\n            let val = (1 / ((args.duration) / 5))\r\n\r\n            if (args.direction === 'in') {\r\n                interval = window.setInterval(async () => {\r\n                    args.player.setVolume(Math.min(1, await args.player.getVolume() + val))\r\n                }, 5)\r\n            } else {\r\n                interval = window.setInterval(async () => {\r\n                    let vol = await args.player.getVolume();\r\n                    args.player.setVolume(Math.max(0, vol - val))\r\n                }, 5)\r\n            }\r\n\r\n            window.setTimeout(() => {\r\n                clearInterval(interval)\r\n                resolve();\r\n            }, args.duration)\r\n        })\r\n    }\r\n\r\n    const [player, setPlayer] = useState<Spotify.Player | undefined>(undefined);\r\n    const [device_id, setDevice_Id] = useState<string>('');\r\n    const [is_paused, setPaused] = useState(false);\r\n    const [is_active, setActive] = useState(false);\r\n    const [current_track, setTrack] = useState(track);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setTime] = useState(0);\r\n    const [fadeDuration, setFadeDuration] = useState(2000);\r\n    const [popupActive, setPopupActive] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\r\n        script.async = true;\r\n\r\n        document.body.appendChild(script);\r\n\r\n        window.onSpotifyWebPlaybackSDKReady = () => {\r\n\r\n            const player = new window.Spotify.Player({\r\n                name: 'Web Playback SDK',\r\n                getOAuthToken: cb => {\r\n                    cb(props.token);\r\n                },\r\n                volume: 1\r\n            });\r\n\r\n            setPlayer(player);\r\n\r\n            player.addListener('ready', ({ device_id }) => {\r\n                setDevice_Id(device_id)\r\n                console.log('Ready with Device ID', device_id, device_id);\r\n            });\r\n\r\n            player.addListener('not_ready', ({ device_id }) => {\r\n                console.log('Device ID has gone offline', device_id);\r\n            });\r\n\r\n            player.addListener('playback_error', (err) => {\r\n                console.log(err);\r\n            })\r\n\r\n            player.addListener('player_state_changed', (state => {\r\n\r\n                if (!state) return\r\n\r\n                setTime(Math.floor(state.position / 1000))\r\n                setDuration(state.duration)\r\n                setTrack(state.track_window.current_track);\r\n                setPaused(state.paused);\r\n\r\n                player.getCurrentState().then(state => {\r\n                    (!state) ? setActive(false) : setActive(true)\r\n                });\r\n            }));\r\n\r\n            player.connect();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const socket = props.socket;\r\n        if (player === undefined) return;\r\n        if (device_id === undefined || device_id === '') return;\r\n\r\n        socket.on('play', (data) => {\r\n            console.log('GOT PLAY');\r\n\r\n            if (is_paused === true) {\r\n                player.togglePlay()\r\n                console.log('Toggled Pla');\r\n            }\r\n            console.log('PLAY');\r\n            fade({\r\n                direction: 'out',\r\n                duration: fadeDuration,\r\n                player: player,\r\n            }).then(() => {\r\n                play({\r\n                    playerInstance: player,\r\n                    id: device_id,\r\n                    spotify_uri: data\r\n                }).then(() => {\r\n                    fade({\r\n                        direction: 'in',\r\n                        duration: fadeDuration,\r\n                        player: player,\r\n                    })\r\n                })\r\n            })\r\n        })\r\n\r\n        socket.on('pause', () => {\r\n            if (is_paused === true) player.togglePlay();\r\n        })\r\n\r\n        socket.on('crossfade', () => {\r\n        })\r\n\r\n        return () => {\r\n            socket.offAny();\r\n        }\r\n    }, [player, device_id])\r\n\r\n    useEffect(() => {\r\n        let interval: number;\r\n\r\n        if (is_paused === false) {\r\n            interval = window.setInterval(() => {\r\n                setTime(currentTime => currentTime + 1)\r\n            }, 1000)\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n    }, [currentTime])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                player !== undefined ?\r\n                    <>\r\n                        {\r\n                            popupActive ?\r\n                                <div className=\"popup\">\r\n                                    <button \r\n                                    className=\"button primaryButton\"\r\n                                    onClick={()=>{\r\n                                        setPopupActive(false);\r\n                                    }}\r\n                                    >\r\n                                        Bitte einmal drücken</button>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                </>\r\n                        }\r\n\r\n                        <div className=\"container\">\r\n                            <div className=\"main-wrapper\">\r\n                                <img src={current_track.album.images[0].url}\r\n                                    className=\"now-playing__cover\" alt=\"\" />\r\n                                <div className=\"now-playing__side\">\r\n                                    <div className=\"now-playing__name\">{\r\n                                        current_track.name\r\n                                    }</div>\r\n                                    <div>\r\n                                    </div>\r\n                                    <div className=\"now-playing__artist\">{\r\n                                        current_track.artists[0].name\r\n                                    }</div>\r\n                                    <div>{currentTime}</div>\r\n                                    <div>{`${Math.floor((duration / 1000) / 60)}:${Math.floor((duration / 1000) % 60)}`}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"button btn-spotify\" onClick={() => { player.previousTrack() }} >\r\n                            &lt;&lt;\r\n                        </button>\r\n\r\n                        <button className=\"button btn-spotify\" onClick={() => {\r\n                            player.togglePlay()\r\n                        }}\r\n                        >\r\n                            {is_paused ? \"PLAY\" : \"PAUSE\"}\r\n                        </button>\r\n\r\n                        <button className=\"button btn-spotify\" onClick={() => { player.nextTrack() }} >\r\n                            &gt;&gt;\r\n                        </button>\r\n                    </>\r\n                    :\r\n                    <></>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport { Player }","import React, { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { io } from 'socket.io-client';\r\nimport { Player } from './Player';\r\n\r\nfunction App() {\r\n  const socket = io('http://localhost:3500');\r\n  const [token, setToken] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on('initalToken', (data) => {\r\n      setToken(data)\r\n\r\n      setInterval(()=>{\r\n        socket.emit('requestNewToken')\r\n      }, 3600 * 1000)\r\n    })\r\n\r\n    socket.on('recievedToken', (data)=>{\r\n      setToken(data)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {\r\n          token !== '' ? <Player token={token} socket={socket} /> : <></>\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}